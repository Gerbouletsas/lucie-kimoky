import logging
import re
from typing import List, Dict, Any
from openai import OpenAI

from vector_store import VectorStore

logger = logging.getLogger(__name__)

class ChatHandler:
    def __init__(self, openai_api_key: str, vector_store: VectorStore):
        self.openai_client = OpenAI(api_key=openai_api_key)
        self.vector_store = vector_store
        self.model = "gpt-4o"
        self.temperature = 0.3

        self.system_prompt = """
Tu es **Lucie**, la conseill√®re digitale de la marque Kimoky (https://kimoky.com), une boutique sp√©cialis√©e dans les kimonos modernes, √©l√©gants et inspir√©s de l'esth√©tique japonaise. Tu accompagnes chaque visiteur avec douceur, pr√©cision et √©l√©gance.

üéØ Ton r√¥le :
1. Guider les clientes et clients dans le choix du kimono id√©al selon leur morphologie, le style recherch√© (chic, nuit, d√©contract√©, plage‚Ä¶), la mati√®re (satin, coton‚Ä¶) ou la saison.
2. R√©pondre de fa√ßon concise, fluide et rassurante √† toutes les questions pratiques : livraison, retours, √©changes, tailles, suivi de commande, s√©curit√©, contact client.

‚ú® Ton ton est toujours :
- po√©tique, chaleureux, professionnel et fluide
- fid√®le √† l'univers raffin√© de Kimoky
- orient√© conseil, inspiration et confiance

üìå R√®gles :
- Tu ne donnes **jamais de prix**
- Tu ne passes **jamais commande**
- Tu ne dis **jamais que tu es une IA ou un chatbot**
- Tu restes toujours polie, rassurante et √©l√©gante
- Tu peux proposer des liens utiles vers https://kimoky.com si cela aide

üñãÔ∏è Tu peux utiliser **1 √† 2 emojis √©l√©gants maximum** (ex : ‚ú®, üå∏, üì¶, üíå), uniquement s'ils renforcent la clart√© ou l'√©motion. Jamais d'emojis trop familiers (üòçüî•üòÇ‚Ä¶).

üí¨ Si une question est floue, reformule-la avec tact. Si la personne semble perdue, guide-la avec douceur.

üéÅ Exemples de ton :
- ¬´ Ce mod√®le long en satin fluide sublimera les silhouettes √©lanc√©es ‚ú® ¬ª
- ¬´ Vous pouvez suivre votre commande directement sur notre page de suivi üì¶ ¬ª
- ¬´ Pour une soir√©e douce √† la maison, optez pour un kimono mi-long en coton l√©ger. ¬ª

Tu es **Lucie**, la voix √©l√©gante et bienveillante de Kimoky üå∏
        """

    # ‚Üê AJOUTEZ CETTE NOUVELLE M√âTHODE ICI
    def _get_quick_size_response(self, question: str) -> str:
        """R√©ponse rapide pour les questions de taille/longueur"""
        question_lower = question.lower()
        
        # Questions sur la longueur, taille, mesures
        if any(word in question_lower for word in [
            'longueur', 'long', 'taille', 'mesure', 'dimension', 
            'cm', 'centim√®tre', 'grand', 'petit', 'sizing'
        ]):
            return """üå∏ Pour conna√Ætre les dimensions exactes de ce kimono, je vous invite √† consulter notre **guide des tailles** qui se trouve juste en dessous du s√©lecteur de tailles sur la fiche produit.

Il vous suffit de cliquer dessus pour voir toutes les mesures d√©taill√©es ‚ú®"""
        
        return None  # Pas de r√©ponse rapide

  # Version qui intercepte AVANT tout traitement :

def get_response(self, question: str, is_mobile: bool = False) -> str:
    try:
        # INTERCEPTION IMM√âDIATE pour les tailles
        question_lower = question.lower()
        
        # Si c'est une question de taille/longueur, r√©ponse imm√©diate
        if any(keyword in question_lower for keyword in [
            'longueur', 'long', 'taille', 'mesure', 'dimension', 'cm'
        ]):
            logger.info(f"Size question intercepted: {question}")
            return """üå∏ Pour conna√Ætre les dimensions exactes de ce kimono, consultez notre **guide des tailles** qui se trouve juste en dessous du s√©lecteur de tailles sur la fiche produit.

Cliquez dessus pour voir toutes les mesures d√©taill√©es ‚ú®"""
        
        # SINON, logique normale
        context_docs = self.vector_store.search(question, top_k=5)
        context = self._build_context(context_docs)

        if context.strip().startswith("Aucun document"):
            return "Je n'ai pas trouv√© cette information dans notre base. Vous pouvez consulter notre page FAQ ou nous √©crire √† boutique@kimoky.com üíå"

        user_prompt = self._create_user_prompt(question, context)

        response = self.openai_client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=self.temperature,
            max_tokens=300 if is_mobile else 500
        )

        answer = response.choices[0].message.content
        answer = re.sub(r"^\[[^\]]+\]\s*", "", answer.strip())

        logger.info(f"Generated response for question: {question[:50]}...")
        return answer

    except Exception as e:
        logger.error(f"Error generating response: {e}")
        return "Je suis d√©sol√©e, une erreur s'est produite. N'h√©sitez pas √† nous recontacter ou √† consulter notre page d'aide."
    def _build_context(self, context_docs: List[Dict[str, Any]]) -> str:
        if not context_docs:
            return "Aucun document de r√©f√©rence trouv√©."

        context_parts = []
        for i, doc in enumerate(context_docs, 1):
            source = doc.get("source_file", "Document")
            text = doc.get("text", "")
            score = doc.get("similarity_score", 0)
            context_parts.append(f"[Document {i} - {source} (pertinence: {score:.2f})]:\n{text}\n")

        return "\n".join(context_parts)

    def _create_user_prompt(self, question: str, context: str) -> str:
        return f"""QUESTION : {question}

CONTEXTE :
{context}

R√©ponds en **2 √† 4 phrases maximum**, avec un ton chaleureux, fluide et professionnel. Si le contexte est insuffisant, rassure ou redirige vers le site Kimoky."""

    def _categorize_question(self, question: str) -> str:
        question_lower = question.lower()
        if any(word in question_lower for word in ["livraison", "exp√©dition", "d√©lai", "transport"]):
            return "livraison"
        elif any(word in question_lower for word in ["retour", "√©change", "remboursement", "cgv"]):
            return "retours"
        elif any(word in question_lower for word in ["taille", "sizing", "mesure", "morphologie"]):
            return "taille"
        elif any(word in question_lower for word in ["mati√®re", "composition", "entretien", "lavage"]):
            return "produit"
        else:
            return "general"

